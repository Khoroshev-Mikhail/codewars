const words = [
'luck',
'this',
'is',
'a',
'japanese',
'doll',
'it',
'free',
'should',
'we',
'start',
'class',
'now',
'or',
'wait',
'for',
'everyone',
'to',
'get',
'here',
'purple',
'pig',
'and',
'green',
'donkey',
'flew',
'kite',
'in',
'the',
'middle',
'of',
'night',
'ended',
'up',
'sunburnt',
'joe',
'made',
'sugar',
'cookies',
'susan',
'decorated',
'them',
'what',
'was',
'person',
'thinking',
'when',
'they',
'discovered',
'cows',
'milk',
'fine',
'human',
'consumption',
'why',
'did',
'do',
'first',
'place',
'quick',
'brown',
'fox',
'jumps',
'over',
'lazy',
'dog',
'i',
'checked',
'make',
'sure',
'that',
'he',
'still',
'alive',
'turned',
'research',
'paper',
'on',
'friday',
'otherwise',
'would',
'have',
'not',
'passed',
'mary',
'plays',
'piano',
'let',
'me',
'help',
'you',
'with',
'your',
'baggage',
'if',
'like',
'tuna',
'tomato',
'sauce',
'try',
'combining',
'two',
'its',
'really',
'as',
'bad',
'sounds',
'getting',
'dark',
'werent',
'there',
'yet',
'want',
'go',
'work',
'but',
'am',
'too',
'sick',
'drive',
'lake',
'long',
'way',
'from',
'very',
'proud',
'my',
'nickname',
'throughout',
'high',
'school',
'today',
'couldnt',
'be',
'any',
'different',
'easter',
'bunny',
'tooth',
'fairy',
'had',
'babies',
'take',
'teeth',
'leave',
'chocolate',
'got',
'early',
'good',
'seats',
'river',
'stole',
'gods',
'last',
'random',
'sentence',
'will',
'writing',
'going',
'stop',
'midsent',
'people',
'eaters',
'are',
'real',
'where',
'find',
'eat',
'she',
'only',
'paints',
'bold',
'colors',
'does',
'pastels',
'abstraction',
'often',
'one',
'floor',
'above',
'buy',
'onesie',
'know',
'wont',
'suit',
'how',
'math',
'test',
'lets',
'all',
'unique',
'together',
'until',
'realise',
'same',
'old',
'apple',
'revels',
'authority',
'short',
'see',
'fence',
'happy',
'donation',
'amount',
'greatly',
'appreciated',
'list',
'sentences',
'harder',
'than',
'initially',
'thought',
'sometimes',
'need',
'completely',
'an',
'ass',
'yourself',
'laugh',
'off',
'life',
'isnt',
'so',
'after',
'mysterious',
'diary',
'records',
'voice',
'lot',
'rain',
'june',
'book',
'front',
'table',
'rock',
'music',
'approaches',
'at',
'velocity',
'advised',
'him',
'come',
'back',
'once',
'said',
'yesterday',
'however',
'many',
'saw',
'hurry',
'always',
'speaks',
'loud',
'never',
'home',
'sundays',
'more',
'detailed',
'information',
'didnt',
'dentist',
'went',
'anyway',
'id',
'rather',
'bird',
'fish',
'tom',
'small',
'piece',
'pie',
'thoughts',
'time',
'1111',
'1234',
'clocks',
'mum',
'tries',
'cool',
'by',
'saying',
'likes',
'things',
'body',
'may',
'perhaps',
'compensates',
'loss',
'true',
'metaphysics',
'hear',
'nancy',
'pretty',
'clock',
'within',
'blog',
'laptop',
'1',
'hour',
'each',
'other',
'borrowed',
'years',
'ago',
'hasnt',
'returned',
'italy',
'favorite',
'country',
'fact',
'plan',
'spend',
'weeks',
'next',
'year',
'busy',
'movie',
'alone',
'little',
'car',
'door',
'slammed',
'shut',
'hand',
'remember',
'quite',
'vividly',
'waves',
'were',
'crashing',
'shore',
'lovely',
'sight',
'works',
'jobs',
'ends',
'meet',
'least',
'her',
'reason',
'having',
'join',
'us',
'young',
'again',
'ever',
'oh',
'just',
'older',
'white',
'out',
'conditions',
'town',
'subsequently',
'roads',
'impassable',
'cats',
'pets',
'clean',
'noisy',
'been',
'asia',
'nor',
'visited',
'africa',
'dont',
'step',
'broken',
'glass',
'love',
'eating',
'toasted',
'cheese',
'sandwiches',
'christmas',
'coming',
'cheat',
'right',
'thing',
'something',
'ill',
'stay',
'away',
'think',
'red',
'lease',
'blue',
'someone',
'recently',
'combined',
'maple',
'syrup',
'buttered',
'popcorn',
'taste',
'caramel',
'recommend',
'anyone',
'else',
'either',
'memory',
'used',
'share',
'no',
'longer',
'coherent',
'wednesday',
'hump',
'day',
'has',
'asked',
'camel',
'hes',
'about',
'currently',
'4',
'windows',
'open',
'stranger',
'officiates',
'meal',
'gotten',
'promotion',
'attendance',
'wasnt',
'enough',
'best',
'yeah',
'environment',
'learning',
'english',
'ran',
'money',
'playing',
'poker',
'shooter',
'says',
'goodbye',
'his',
'check',
'tomorrow',
'arrived',
'please',
'outside',
'house',
'counting',
'calories',
'dessert',
'told',
'exciting',
'adventure',
'story',
'song',
'can',
'ruin',
'persons',
'malls',
'great',
'places',
'shop',
'everything',
'under',
'roof',
'better',
'walk',
'later',
'youre',
'frame',
'mind',
'sixtyfour',
'comes',
'asking',
'bread',
'folded',
'handkerchief',
'neatly',
'wow',
'wrote',
'letter',
'read',
'sky',
'clear',
'stars',
'twinkling',
'vacant',
'rent',
'room',
'our',
'party',
'glittering',
'gem',
'ice',
'cream',
'freezer',
'store',
'three',
'spotted',
'striped',
'worm',
'shake',
'hands',
'legless',
'lizard'
]
const words2 = [
    'good',
    'luck',
    'fuck'
]
let VALID_WORDS = new Set()
for(let item of words2){
    VALID_WORDS.add(item)
}

/*

Базовый случай: Если sentece.length === 0 return arr

1.Пока есть совпадения вызываем maxMatch дальше и увеличиваем длину слова на 1.
    maxMatch(sentece, sentece.slice(0, word.length + 1), arr)
2.Если нет совпадений.
    arr.push(sentece.slice(0, word.length - 1))
    maxMatch(sentece.slice(word.length), sentece.slice(word.length)[0], arr)

*/
function maxMatch(sentence, word = sentence[0], arr = []){
    if(sentence.length === 0 || word === undefined){
        return arr
    }
    let hits = Array.from(VALID_WORDS).filter(el => el.slice(0, word.length) === word)
    let nextHits = []
    if(sentence.length > word.length){
        let nextWord = sentence.slice(0, word.length + 1)
        nextHits = Array.from(VALID_WORDS).filter(el => el.slice(0, nextWord.length) === nextWord)
    }

    if(hits.length >= 1 && nextHits.length === 0){    
        arr.push(word)
        return maxMatch(sentence.slice(word.length), sentence.slice(word.length)[0], arr)
    }  
    return maxMatch(sentence, sentence.slice(0, word.length + 1), arr)
}
let ara = 'goodluckfuck'

console.log(maxMatch('goodluckfuck'))
/*
    maxMatch('goodluck', 'g', [])
    maxMatch('goodluck', 'go', [])
    maxMatch('goodluck', 'goo', [])
    maxMatch('goodluck', 'good', [])
    maxMatch('luck', 'l', ['good'])
    maxMatch('luck', 'lu', ['good'])
    maxMatch('luck', 'luc', ['good'])
    maxMatch('luck', 'luck', ['good'])
    maxMatch('', '', ['good', 'luck'])
*/